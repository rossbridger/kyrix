(library (ir)
  (export Lsrc unparse-Lsrc L1 unparse-L1 L2 unparse-L2 L3 unparse-L3
	  L4 unparse-L4 L5 unparse-L5 L6 unparse-L6 L7 unparse-L7 L8 unparse-L8 L9
	  unparse-L9 L10 unparse-L10 L11 unparse-L11 L12 unparse-L12 L13 unparse-L13
	  L14 unparse-L14 L15 unparse-L15 L16 unparse-L16 L17 unparse-L17 L18
	  unparse-L18 L19 unparse-L19 L20 unparse-L20 L21 unparse-L21 L22 unparse-L22
	  L23 unparse-L23 L24 unparse-L24 L25 unparse-L25 L26 unparse-L26 L27
	  unparse-L27 L28 unparse-L28)

  (import (chezscheme)
	  (nanopass)
	  (helpers))

  (define-language Lsrc
    (entry Program)
    (terminals
     (constant (c))
     (symbol (x))
     (datum (d)))
    (Expr (e body)
	  x
	  c
	  (quote d)
	  (if e0 e1)
	  (if e0 e1 e2)
	  (and e* ...)
	  (or e* ...)
	  (not e)
	  (begin e* ... e)
	  (lambda (x* ...) body* ... body)
	  (let ([x* e*] ...) body* ... body)
	  (letrec ([x* e*] ...) body* ... body)
	  (set! x e)
	  (e e* ...))
    (Program (prog)
	     e))

  (define-language L1
    (extends Lsrc)
    (terminals
     (- (symbol (x)))
     (+ (uvar (uv x fml))
	(primitive (pr))))
    (Expr (e body)
	  (- c
	     x
	     (if e0 e1)
	     (lambda (x* ...) body* ... body)
	     (let ([x* e*] ...) body* ... body)
	     (letrec ([x* e*] ...) body* ... body)
	     (and e* ...)
	     (or e* ...)
	     (not e)
	     (set! x e)
	     )
	  (+ uv
	     pr
	     (lambda (fml* ...) body)
	     (let ([x* e*] ...) body)
	     (letrec ([x* e*] ...) body)
	     (set! x e)
	     )))

  (define-language L2
    (extends L1)
    (terminals
     (- (datum (d))))
    (Expr (body e)
	  (- (quote d))
	  (+ (quote c))))

  (define-language L3
    (extends L2)
    (AssignedBody (abody)
		  (+ (assigned (x* ...) body)))
    (Expr (body e)
	  (- (letrec ([x* e*] ...) body)
	     (let ([x* e*] ...) body)
	     (lambda (fml* ...) body))
	  (+ (letrec ([x* e*] ...) abody)
	     (let ([x* e*] ...) abody)
	     (lambda (fml* ...) abody))))
  
  (define-language L4
    (extends L3)
    (LambdaExpr (le)
		(+ (lambda (fml* ...) abody)))
    (Expr (body e)
	  (- (letrec ([x* e*] ...) abody)
	     (lambda (fml* ...) abody))
	  (+ le
	     (letrec ([x* e*] ...) body))))
  
  (define-language L5
    (extends L4)
    (AssignedBody (abody)
		  (- (assigned (x* ...) body)))
    (LambdaExpr (le)
		(- (lambda (fml* ...) abody))
		(+ (lambda (fml* ...) body)))
    (Expr (e body)
	  (- (set! x e)
	     (let ([x* e*] ...) abody))
	  (+ (let ([x* e*] ...) body))))
  
  (define-language L6
    (extends L5)
    (Expr (e body)
	  (- le
	     (letrec ([x* e*] ...) body))
	  (+ (letrec ([x* le*] ...) body))))
  
  (define-language L7
    (extends L6)
    (FreeBody (fbody)
	      (+ (free (x* ...) body)))
    (LambdaExpr (le)
		(- (lambda (fml* ...) body))
		(+ (lambda (fml* ...) fbody))))

  (define-language L8
    (extends L7)
    (terminals
     (- (uvar (uv x fml)))
     (+ (uvar (x f fml))
	(label (l))))
    (FreeBody (fbody)
	      (- (free (x* ...) body))
	      (+ (bind-free (x* ...) body)))
    (ClosureBody (cbody)
		 (+ (closures ([x* l* f** ...] ...) body)))
    (Expr (e body)
	  (- uv
	     (letrec ([x* le*] ...) body))
	  (+ x
	     l
	     (letrec ([l* le*] ...) cbody))))
  
  (define-language L9
    (extends L8)
    (terminals
     (- (primitive (pr)))
     (+ (procedure+primitive (pr))))
    (Expr (e body)
	  (- (letrec ([l* le*] ...) cbody))
	  (+ (letrec ([l* le*] ...) body)))
    (LambdaExpr (le)
		(- (lambda (fml* ...) fbody))
		(+ (lambda (fml* ...) body)))
    (ClosureBody (cbody)
		 (- (closures ((x* l* f** ...) ...) body)))
    (FreeBody (fbody)
	      (- (bind-free (x* ...) body))))
  
  (define-language L10
    (extends L9)
    (Program (prog)
	     (- e)
	     (+ (letrec ([l* le*] ...) body)))
    (Expr (e body)
	  (- (letrec ([l* le*] ...) body))))
  
  ;; better rewrite it completely.
  (define-language L11
    (entry Program)
    (terminals
     (label (l))
     (uvar (x))
     (constant (c))
     (value-primitive (val-pr))
     (predicate-primitive (pred-pr))
     (effect-primitive (ef-pr)))
    (Pred (p pbody)
	  (let ([x* v*] ...) pbody)
	  (true)
	  (false)
	  (if p0 p1 p2)
	  (begin e* ... p)
	  (pred-pr v* ...))
    (Effect (e ebody)
	    (let ([x* v*] ...) ebody)
	    (nop)
	    (if p0 e1 e2)
	    (begin e* ... e)
	    (ef-pr v* ...)
	    (call v v* ...) => (v v* ...))
    (Value (v vbody)
	   x
	   l
	   (quote c)
	   (let ([x* v*] ...) vbody)
	   (if p0 v1 v2)
	   (begin e* ... v)
	   (val-pr v* ...)
	   (call v v* ...) => (v v* ...))
    (LambdaExpr (le)
		(lambda (x* ...) vbody))
    (Program (prog)
	     (letrec ([l* le*] ...) vbody)))

  (define-language L12
    (extends L11)
    (terminals
     (+ (int64 (i))
	(binary-op (binop))
	(pred-op (relop)))
     (- (constant (c))
	(value-primitive (val-pr))
	(predicate-primitive (pred-pr))
	(effect-primitive (ef-pr))))
    (Triv (triv)
	  (+ x i l))
    (Tail (tbody t)
	  (+ triv
	     (mref v1 v2)
	     (call v v* ...)
	     (binop v1 v2)
	     (alloc v)
	     (if p0 t1 t2)
	     (begin e* ... tbody)
	     (let ([x* v*] ...) tbody)))
    (Pred (p pbody)
	  (- (pred-pr v* ...))
	  (+ (relop v1 v2)))
    (Effect (e ebody)
	    (- (ef-pr v* ...))
	    (+ (mset! v1 v2 v3)))
    (Value (v vbody)
	   (- x
	      l
	      (quote c)
	      (val-pr v* ...))
	   (+ triv
	      (mref v1 v2)
	      (binop v1 v2)
	      (alloc v)))
    (LambdaExpr (le)
		(- (lambda (x* ...) vbody))
		(+ (lambda (x* ...) tbody)))
    (Program (prog)
	     (- (letrec ([l* le*] ...) vbody))
	     (+ (letrec ([l* le*] ...) tbody))))

  ;; uncover-locals
  (define-language L13
    (extends L12)
    (terminals
     (- (uvar (x)))
     (+ (uvar (x local))))
    (Program (prog)
	     (- (letrec ([l* le*] ...) tbody))
	     (+ (letrec ([l* le*] ...) body)))
    (LambdaExpr (le)
		(- (lambda (x* ...) tbody))
		(+ (lambda (x* ...) body)))
    (Body (body)
	  (+ (locals (local* ...) tbody))))
  
  (define-language L14
    (extends L13)
    (Pred (p pbody)
	  (- (let ([x* v*] ...) pbody)))
    (Effect (e ebody)
	    (- (let ([x* v*] ...) ebody))
	    (+ (set! x v)))
    (Value (v vbody)
	   (- (let ([x* v*] ...) vbody)))
    (Tail (t tbody)
	  (- (let ([x* v*] ...) tbody))))
  
  (define-language L15
    (extends L14)
    (Effect (e ebody)
	    (- (mset! v1 v2 v3)
	       (call v v* ...))
	    (+ (mset! triv1 triv2 triv3)
	       (call triv triv* ...)))
    (Pred (p pbody)
	  (- (relop v1 v2))
	  (+ (relop triv1 triv2)))
    (Value (v vbody)
	   (- (alloc v)
	      (binop v1 v2)
	      (mref v1 v2)
	      (call v v* ...))
	   (+ (alloc triv)
	      (binop triv1 triv2)
	      (mref triv1 triv2)
	      (call triv triv* ...)))
    (Tail (t tbody)
	  (- (mref v1 v2)
	     (call v v* ...)
	     (binop v1 v2)
	     (alloc v))
	  (+ (mref triv1 triv2)
	     (binop triv1 triv2)
	     (call triv triv* ...)
	     (alloc triv))))
  
  (define-language L16
    (extends L15)
    (Rhs (rhs)
	 (+ triv
	    (binop triv1 triv2)
	    (call triv triv* ...)
	    (alloc triv)
	    (mref triv1 triv2)))
    (Effect (e ebody)
	    (- (set! x v))
	    (+ (set! x rhs)))
    (Value (v vbody)
	   (- triv
	      (alloc triv)
	      (binop triv1 triv2)
	      (mref triv1 triv2)
	      (call triv triv* ...)
	      (if p0 v1 v2)
	      (begin e* ... v))))
  
  (define-language L17
    (extends L16)
    (terminals
     (- (uvar (x local)))
     (+ (uvar (x nfv local))
	(register (r))
	(frame-var (fv))))
    (Location (loc)
	      (+ r fv))
    (Triv (triv)
	  (- x)
	  (+ var))
    (Variable (var)
	      (+ x loc))
    (Frame (frame)
	   (+ (nfv* ...)))
    (FrameBody (fbody)
	       (+ (new-frames (frame* ...) tbody)))
    (Body (body)
	  (- (locals (local* ...) tbody))
	  (+ (locals (local* ...) fbody)))
    (LambdaExpr (le)
		(- (lambda (x* ...) body))
		(+ (lambda () body)))
    (Effect (e ebody)
	    (- (set! x rhs)
	       (call triv triv* ...))
	    (+ (set! var rhs)
	       (return-point l tbody)))
    (Rhs (rhs)
	 (- (call triv triv* ...)))
    (Tail (t tbody)
	  (- triv
	     (call triv triv* ...)
	     (binop triv1 triv2)
	     (alloc triv)
	     (mref triv1 triv2))
	  (+ (call triv loc* ...))))

  (define-language L17a
    (extends L17)
    (Rhs (rhs)
	 (- (alloc triv))))

  (define-language L18
    (extends L17a)
    (terminals
     (- (uvar (x nfv local)))
     (+ (uvar (x y z nfv local spill))))
    (UFVar (live)
	     (+ x fv))
    (SpillsBody (sbody)
		(+ (spills (spill* ...) cbody)))
    (ConflictBody (cbody)
		  (+ (frame-conflict ((y* var** ...) ...) lbody)))
    (LiveBody (lbody)
	      (+ (call-live (live* ...) tbody)))
    (FrameBody (fbody)
	       (- (new-frames (frame* ...) tbody))
	       (+ (new-frames (frame* ...) sbody))))
  
  (define-language L19
    (extends L18)
    (SpillsBody (sbody)
		(- (spills (spill* ...) cbody)))
    (LocateBody (locbody)
		(+ (locate ([z* fv*] ...) cbody)))
    (FrameBody (fbody)
	       (- (new-frames (frame* ...) sbody))
	       (+ (new-frames (frame* ...) locbody))))

  (define-language L20
    (extends L19)
    (terminals
     (- (uvar (x y z nfv local spill)))
     (+ (uvar (x y z local ulocal))))
    (UFVar (live)
	     (- x fv))
    (Frame (frame)
	   (- (nfv* ...)))
    (FrameBody (fbody)
	       (- (new-frames (frame* ...) locbody)))
    (LiveBody (lbody)
	      (- (call-live (live* ...) tbody)))
    (ConflictBody (cbody)
		  (- (frame-conflict ((y* var** ...) ...) lbody))
		  (+ (frame-conflict ((y* var** ...) ...) tbody)))
    (Body (body)
	  (- (locals (local* ...) fbody))
	  (+ (locals (local* ...) ulbody)
	     (locate ([x* loc*] ...) tbody)))
    (ULocalBody (ulbody)
		(+ (ulocals (ulocal* ...) locbody))))

  (define-language L21
    (extends L20)
    (uvar/register (ur)
		   (+ x r))
    (RegisterConflictBody (rcbody)
			  (+ (register-conflict ((x* ur** ...) ...) tbody)))
    (ConflictBody (cbody)
		  (- (frame-conflict ((y* var** ...) ...) tbody))
		  (+ (frame-conflict ((y* var** ...) ...) rcbody))))

  (define-language L22
    (extends L21)
    (terminals
     (- (uvar (x y z local ulocal)))
     (+ (uvar (x y z local ulocal spill))))
    (SpillsBody (sbody)
		(+ (spills (spill* ...) locbody)))
    (ConflictBody (cbody)
		  (- (frame-conflict ((y* var** ...) ...) rcbody))
		  (+ (frame-conflict ((y* var** ...) ...) tbody)))
    (ULocalBody (ulbody)
		(- (ulocals (ulocal* ...) locbody))
		(+ (ulocals (ulocal* ...) sbody))))

  (define-language L23
    (extends L22)
    (Tail (t tbody)
	  (- (call triv loc* ...))
	  (+ (triv)))
    (uvar/register (ur) (- x r))
    (Body (body)
	  (- (locals (local* ...) ulbody)))
    (LocateBody (locbody)
		(- (locate ((z* fv*) ...) cbody)))
    (ConflictBody (cbody)
		  (- (frame-conflict ((y* var** ...) ...) tbody)))
    (ULocalBody (ulbody)
		(- (ulocals (ulocal* ...) sbody)))
    (SpillsBody (sbody)
		(- (spills (spill* ...) locbody)))
    (RegisterConflictBody (rcbody)
			  (- (register-conflict ((x* ur** ...) ...) tbody))))
  (define-language L24
    (extends L23)
    (terminals
     (- (uvar (x y z local ulocal spill))))
    (Variable (var) (- x loc))
    (Triv (triv) (- var))
    (Effect (e ebody)
	    (- (set! var rhs))
	    (+ (set! loc rhs)))
    (Body (body)
	  (- (locate ([x* loc*] ...) tbody)))
    (LambdaExpr (le)
		(- (lambda () body))
		(+ (lambda () tbody)))
    (Program (prog)
	     (- (letrec ([l* le*] ...) body))
	     (+ (letrec ([l* le*] ...) tbody))))
  
  (define-language L25
    (extends L24)
    (terminals
     (- (frame-var (fv))))
    (Offset (offset)
	    (+ r
	       i))
    (Memory (mem)
	    (+ (disp r offset)))
    (Location (loc)
	      (- fv)
	      (+ mem)))

  (define-language L26
    (extends L25)
    (Rhs (rhs)
	 (- (mref triv1 triv2)))
    (Effect (e ebody)
	    (- (mset! triv1 triv2 triv3))))

  (define-language L27
    (extends L26)
    (Statement (stmt)
	       (+ t e))
    (Pred (pred)
	  (- (true)
	     (false)
	     (relop triv1 triv2)
	     (if p0 p1 p2)
	     (begin e* ... p)))
    (Tail (t tbody)
	  (- (if p0 t1 t2))
	  (+ (if (relop triv1 triv2) (l1) (l2))))
    (Effect (e)
	    (- (nop)
	       (return-point l tbody)
	       (if p0 e1 e2)
	       (begin e* ... e))))

  (define-language L28
    (extends L27)
    (Tail (t tbody)
          (- (if (relop triv1 triv2) (l1) (l2))
             (triv)
             (begin e* ... tbody)))

    (Effect (ef)
            (- (set! loc rhs)))
    (Condition (cond)
	       (+ (relop triv1 triv2)
		  (not (relop triv1 triv2))))
    (Goto (g)
	  (+ (jump triv)))

    (Statement (stmt)
	       (- e t)
               (+ l
                  (set! loc rhs)
		  (if cond g)
                  g))
    (LambdaExpr (le)
              (- (lambda () tbody)))
    (Program (prog)
             (- (letrec ([l* le*] ...) tbody))
	     (+ (code stmt* ...))))
  )
