(library (compiler remove-let)
  (export remove-let)
  (import (chezscheme)
	  (nanopass)
	  (compiler helpers)
	  (compiler ir))

  (define-pass remove-let : L13a (x) -> L14 ()
    (definitions
      (define (generate-set! x* v*)
	(with-output-language (L14 Effect)
			      (map (lambda (x v) `(set! ,x ,v)) x* v*))))
    (Pred : Pred (x) -> Pred ()
	  [(let ([,x* ,[v*]] ...) ,[pbody]) `(begin ,(generate-set! x* v*) ... ,pbody)])
    (Effect : Effect (x) -> Effect ()
	    [(let ([,x* ,[v*]] ...) ,[ebody]) `(begin ,(generate-set! x* v*) ... ,ebody)])
    (Value : Value (x) -> Value ()
	   [(let ([,x* ,[v*]] ...) ,[vbody]) `(begin ,(generate-set! x* v*) ... ,vbody)])
    (Tail : Tail (x) -> Tail ()
	  [(let ([,x* ,[v*]] ...) ,[tbody]) `(begin ,(generate-set! x* v*) ... ,tbody)]))
  )
